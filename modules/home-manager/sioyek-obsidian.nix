{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.programs.sioyekObs;

  renderPrefs = prefs:
    lib.concatStringsSep "\n"
    (lib.mapAttrsToList (k: v: "${k}=${toString v}") prefs);

  toStr = builtins.toString;
in {
  options.programs.sioyekObs = {
    enable = lib.mkEnableOption "Sioyek + Obsidian Markdown export setup";

    package = lib.mkOption {
      type = lib.types.package;
      default = pkgs.sioyek;
      description = "Sioyek package to use.";
    };

    pdfannotsPackage = lib.mkOption {
      type = lib.types.package;
      default = pkgs.pdfannots;
      description = "pdfannots to extract annotations to Markdown.";
    };

    vaultPath = lib.mkOption {
      type = lib.types.path;
      example = "/home/you/Obsidian/ResearchVault";
      description = "Absolute path to your Obsidian vault.";
    };

    notesSubdir = lib.mkOption {
      type = lib.types.str;
      default = "notes";
      description = "Subdirectory inside the vault for exported Markdown notes.";
    };

    sharedDbRelative = lib.mkOption {
      type = lib.types.str;
      default = "Sioyek/shared.db";
      description = "Relative path (inside the vault) for Sioyek shared.db.";
    };

    scriptPath = lib.mkOption {
      type = lib.types.path;
      default = "${config.home.homeDirectory}/.local/bin/sioyek-to-md";
      description = "Path of the helper script that converts annotations to Markdown.";
    };

    installExtras = lib.mkOption {
      type = lib.types.bool;
      default = true;
      description = "Install ocrmypdf, tesseract, poppler-utils, ripgrep-all.";
    };

    extraPrefs = lib.mkOption {
      type = lib.types.attrs;
      default = {
        dark_mode = "1";
        render_annot_highlights = "1";
        autoload_toc = "1";
        fit_to_page_mode = "1";
        smooth_scrolling = "1";
      };
      description = "Additional Sioyek preferences (key=value).";
    };

    extraKeys = lib.mkOption {
      type = lib.types.lines;
      default = "";
      description = "Extra Sioyek key mappings (raw lines).";
    };
  };

  config = lib.mkIf cfg.enable {
    home.packages =
      [cfg.package cfg.pdfannotsPackage]
      ++ lib.optionals cfg.installExtras [
        pkgs.ocrmypdf
        pkgs.tesseract
        pkgs.poppler_utils
        pkgs.ripgrep-all
      ];

    # Compose prefs text
    home.file."sioyek-prefs".target = "${config.home.homeDirectory}/.config/sioyek/prefs.config";
    home.file."sioyek-prefs".text = let
      sharedDbPath = "${toStr cfg.vaultPath}/${cfg.sharedDbRelative}";
      basePrefs = {
        shared_database_path = sharedDbPath;
      };
      merged = basePrefs // cfg.extraPrefs;
    in ''
      # Generated by Home Manager (sioyekObs)
      ${renderPrefs merged}
    '';

    # Keys
    home.file."sioyek-keys".target = "${config.home.homeDirectory}/.config/sioyek/keys.config";
    home.file."sioyek-keys".text = ''
      # Generated by Home Manager (sioyekObs)

      # 1) Embed annotations into a copy of the current PDF
      map e embed_annotations

      # 2) Export annotations to Markdown in your Obsidian vault
      map E run ${toStr cfg.scriptPath} "%{current_file}"

      ${cfg.extraKeys}
    '';

    # Ensure vault + notes subdir exist (place harmless files)
    home.file."vault-ensure-exists".target = "${toStr cfg.vaultPath}/.hm-ensure-exists";
    home.file."vault-ensure-exists".text = "";
    home.file."vault-notes-ensure-exists".target = "${toStr cfg.vaultPath}/${cfg.notesSubdir}/.keep";
    home.file."vault-notes-ensure-exists".text = "";

    # Export helper script via home.file with explicit target
    home.file."sioyek-to-md-script".target = toStr cfg.scriptPath;
    home.file."sioyek-to-md-script".text = let
      notesDir = "${toStr cfg.vaultPath}/${cfg.notesSubdir}";
    in ''
      #!${pkgs.bash}/bin/bash
      set -euo pipefail

      PDF="$1"
      if [ ! -f "$PDF" ]; then
        echo "File not found: $PDF" >&2
        exit 1
      fi

      dir="$(dirname "$PDF")"
      base="$(basename "$PDF")"
      stem="''${base%.*}"

      embedded_pdf="''${dir}/''${stem}.embedded.pdf"

      if [ ! -f "$embedded_pdf" ]; then
        echo "Embedded PDF not found: $embedded_pdf" >&2
        echo "Open the file in Sioyek and press 'e' (embed_annotations) first." >&2
        exit 2
      fi

      mkdir -p "${notesDir}"
      out_md="${notesDir}/''${stem}.md"

      "${cfg.pdfannotsPackage}/bin/pdfannots" "$embedded_pdf" -o "$out_md"

      # Prepend Obsidian-friendly YAML if not present
      if [ ! -s "$out_md" ] || ! head -n1 "$out_md" | grep -q '^---$'; then
        tmp="$(mktemp)"
        {
          echo '---'
          echo "title: \"''${stem}\""
          echo "source: \"[[''${stem}.pdf]]\""
          echo '---'
          echo
          cat "$out_md"
        } > "$tmp"
        mv "$tmp" "$out_md"
      fi

      echo "Exported annotations â†’ ''${out_md}"
    '';
    home.file."sioyek-to-md-script".executable = true;

    # Make sure ~/.local/bin is in PATH for Hyprland sessions
    home.sessionPath = ["${config.home.homeDirectory}/.local/bin"];
  };
}
